// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk'], (function load__zapp_user_main(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const io = dart_sdk.io;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var Machine = Object.create(dart.library);
  var Enums = Object.create(dart.library);
  var Resources = Object.create(dart.library);
  var ICoffee = Object.create(dart.library);
  var Coffee = Object.create(dart.library);
  var $toString = dartx.toString;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: Enums.CoffeeType.prototype,
        [_Enum__name]: "cappuccino",
        [_Enum_index]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: Enums.CoffeeType.prototype,
        [_Enum__name]: "espresso",
        [_Enum_index]: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: Enums.CoffeeType.prototype,
        [_Enum__name]: "americano",
        [_Enum_index]: 2
      });
    },
    get C1() {
      return C[1] = dart.constList([C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4], Enums.CoffeeType);
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "file:///zapp/project/lib/Machine.dart",
    "file:///zapp/project/lib/Enums.dart",
    "file:///zapp/project/lib/Resources.dart",
    "file:///zapp/project/lib/ICoffee.dart",
    "file:///zapp/project/lib/Coffee.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
        }, T.VoidToNull())});
    });
  };
  main.main = function main$0() {
    let t0, t0$;
    let coffeeMachine = new Machine.Machine.new();
    coffeeMachine.fillResources(100, 200, 300);
    io.stdout.write("Введите сумму денег: ");
    let userMoney = core.int.tryParse((t0 = io.stdin.readLineSync(), t0 == null ? "" : t0));
    if (userMoney == null) {
      core.print("Некорректный ввод суммы.");
      return;
    }
    core.print("Выберите тип кофе:");
    core.print("1 - Cappuccino (120)");
    core.print("2 - Espresso   (100)");
    core.print("3 - Americano  (80)");
    io.stdout.write("Ваш выбор: ");
    let choice = core.int.tryParse((t0$ = io.stdin.readLineSync(), t0$ == null ? "" : t0$));
    if (choice == null) {
      core.print("Некорректный ввод.");
      return;
    }
    let selectedType = null;
    switch (choice) {
      case 1:
        {
          selectedType = Enums.CoffeeType.cappuccino;
          break;
        }
      case 2:
        {
          selectedType = Enums.CoffeeType.espresso;
          break;
        }
      case 3:
        {
          selectedType = Enums.CoffeeType.americano;
          break;
        }
      default:
        {
          core.print("Некорректный выбор.");
          return;
        }
    }
    let result = coffeeMachine.buyCoffee(selectedType, userMoney);
    if (result === -1) {
      core.print("Недостаточно ресурсов для приготовления выбранного кофе.");
    } else if (result === -2) {
      core.print("Недостаточно денег. Нужно больше средств!");
    } else {
      let change = result;
      core.print("Ваша сдача: " + dart.str(change));
    }
    core.print("\nОстаток ресурсов:");
    core.print("Кофейные зёрна: " + dart.str(coffeeMachine.resources.coffeeBeans));
    core.print("Молоко: " + dart.str(coffeeMachine.resources.milk));
    core.print("Вода: " + dart.str(coffeeMachine.resources.water));
    core.print("Касса (заработано): " + dart.str(coffeeMachine.resources.cash));
  };
  var resources = dart.privateName(Machine, "Machine.resources");
  Machine.Machine = class Machine$ extends core.Object {
    get resources() {
      return this[resources];
    }
    set resources(value) {
      this[resources] = value;
    }
    fillResources(beans, milk, water) {
      let t0, t0$, t0$0;
      t0 = this.resources;
      t0.coffeeBeans = t0.coffeeBeans + beans;
      t0$ = this.resources;
      t0$.milk = t0$.milk + milk;
      t0$0 = this.resources;
      t0$0.water = t0$0.water + water;
    }
    isAvailableResources(coffee) {
      return this.resources.coffeeBeans >= coffee.coffeeBeans() && this.resources.milk >= coffee.milk() && this.resources.water >= coffee.water();
    }
    buyCoffee(type, userMoney) {
      let t0;
      let coffee = new Coffee.Coffee.new(type);
      if (!this.isAvailableResources(coffee)) {
        return -1;
      }
      if (userMoney < coffee.cash()) {
        return -2;
      }
      this.makeCoffee(coffee);
      t0 = this.resources;
      t0.cash = t0.cash + coffee.cash();
      let change = userMoney - coffee.cash();
      return change;
    }
    makeCoffee(coffee) {
      let t0, t0$, t0$0;
      t0 = this.resources;
      t0.coffeeBeans = t0.coffeeBeans - coffee.coffeeBeans();
      t0$ = this.resources;
      t0$.milk = t0$.milk - coffee.milk();
      t0$0 = this.resources;
      t0$0.water = t0$0.water - coffee.water();
      core.print("Кофе готов! Приятного дня!");
    }
    static ['_#new#tearOff']() {
      return new Machine.Machine.new();
    }
  };
  (Machine.Machine.new = function() {
    this[resources] = new Resources.Resources.new();
    ;
  }).prototype = Machine.Machine.prototype;
  dart.addTypeTests(Machine.Machine);
  dart.addTypeCaches(Machine.Machine);
  dart.setMethodSignature(Machine.Machine, () => ({
    __proto__: dart.getMethods(Machine.Machine.__proto__),
    fillResources: dart.fnType(dart.void, [core.int, core.int, core.int]),
    isAvailableResources: dart.fnType(core.bool, [ICoffee.ICoffee]),
    buyCoffee: dart.fnType(core.int, [Enums.CoffeeType, core.int]),
    makeCoffee: dart.fnType(dart.void, [ICoffee.ICoffee])
  }));
  dart.setLibraryUri(Machine.Machine, I[0]);
  dart.setFieldSignature(Machine.Machine, () => ({
    __proto__: dart.getFields(Machine.Machine.__proto__),
    resources: dart.fieldType(Resources.Resources)
  }));
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  Enums.CoffeeType = class CoffeeType extends core._Enum {
    [_enumToString]() {
      return "CoffeeType." + this[_name];
    }
  };
  (Enums.CoffeeType.new = function(index, name) {
    Enums.CoffeeType.__proto__.new.call(this, index, name);
    ;
  }).prototype = Enums.CoffeeType.prototype;
  dart.addTypeTests(Enums.CoffeeType);
  dart.addTypeCaches(Enums.CoffeeType);
  dart.setMethodSignature(Enums.CoffeeType, () => ({
    __proto__: dart.getMethods(Enums.CoffeeType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(Enums.CoffeeType, I[1]);
  dart.setStaticFieldSignature(Enums.CoffeeType, () => ['values', 'cappuccino', 'espresso', 'americano']);
  dart.defineLazy(Enums.CoffeeType, {
    /*Enums.CoffeeType.values*/get values() {
      return C[1] || CT.C1;
    },
    /*Enums.CoffeeType.cappuccino*/get cappuccino() {
      return C[2] || CT.C2;
    },
    /*Enums.CoffeeType.espresso*/get espresso() {
      return C[3] || CT.C3;
    },
    /*Enums.CoffeeType.americano*/get americano() {
      return C[4] || CT.C4;
    }
  }, false);
  var coffeeBeans$ = dart.privateName(Resources, "Resources.coffeeBeans");
  var milk$ = dart.privateName(Resources, "Resources.milk");
  var water$ = dart.privateName(Resources, "Resources.water");
  var cash$ = dart.privateName(Resources, "Resources.cash");
  Resources.Resources = class Resources$ extends core.Object {
    get coffeeBeans() {
      return this[coffeeBeans$];
    }
    set coffeeBeans(value) {
      this[coffeeBeans$] = value;
    }
    get milk() {
      return this[milk$];
    }
    set milk(value) {
      this[milk$] = value;
    }
    get water() {
      return this[water$];
    }
    set water(value) {
      this[water$] = value;
    }
    get cash() {
      return this[cash$];
    }
    set cash(value) {
      this[cash$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let coffeeBeans = opts && 'coffeeBeans' in opts ? opts.coffeeBeans : 0;
      let milk = opts && 'milk' in opts ? opts.milk : 0;
      let water = opts && 'water' in opts ? opts.water : 0;
      let cash = opts && 'cash' in opts ? opts.cash : 0;
      return new Resources.Resources.new({coffeeBeans: coffeeBeans, milk: milk, water: water, cash: cash});
    }
    getResource(resourceName) {
      switch (resourceName) {
        case "coffeeBeans":
          {
            return this.coffeeBeans;
          }
        case "milk":
          {
            return this.milk;
          }
        case "water":
          {
            return this.water;
          }
        case "cash":
          {
            return this.cash;
          }
        default:
          {
            return 0;
          }
      }
    }
    setResource(resourceName, value) {
      switch (resourceName) {
        case "coffeeBeans":
          {
            this.coffeeBeans = value;
            break;
          }
        case "milk":
          {
            this.milk = value;
            break;
          }
        case "water":
          {
            this.water = value;
            break;
          }
        case "cash":
          {
            this.cash = value;
            break;
          }
        default:
          {
            break;
          }
      }
    }
  };
  (Resources.Resources.new = function(opts) {
    let coffeeBeans = opts && 'coffeeBeans' in opts ? opts.coffeeBeans : 0;
    let milk = opts && 'milk' in opts ? opts.milk : 0;
    let water = opts && 'water' in opts ? opts.water : 0;
    let cash = opts && 'cash' in opts ? opts.cash : 0;
    this[coffeeBeans$] = coffeeBeans;
    this[milk$] = milk;
    this[water$] = water;
    this[cash$] = cash;
    ;
  }).prototype = Resources.Resources.prototype;
  dart.addTypeTests(Resources.Resources);
  dart.addTypeCaches(Resources.Resources);
  dart.setMethodSignature(Resources.Resources, () => ({
    __proto__: dart.getMethods(Resources.Resources.__proto__),
    getResource: dart.fnType(core.int, [core.String]),
    setResource: dart.fnType(dart.void, [core.String, core.int])
  }));
  dart.setLibraryUri(Resources.Resources, I[2]);
  dart.setFieldSignature(Resources.Resources, () => ({
    __proto__: dart.getFields(Resources.Resources.__proto__),
    coffeeBeans: dart.fieldType(core.int),
    milk: dart.fieldType(core.int),
    water: dart.fieldType(core.int),
    cash: dart.fieldType(core.int)
  }));
  ICoffee.ICoffee = class ICoffee extends core.Object {};
  (ICoffee.ICoffee.new = function() {
    ;
  }).prototype = ICoffee.ICoffee.prototype;
  dart.addTypeTests(ICoffee.ICoffee);
  dart.addTypeCaches(ICoffee.ICoffee);
  dart.setLibraryUri(ICoffee.ICoffee, I[3]);
  var _type$ = dart.privateName(Coffee, "_type");
  Coffee.Coffee = class Coffee$ extends core.Object {
    static ['_#new#tearOff'](_type) {
      return new Coffee.Coffee.new(_type);
    }
    coffeeBeans() {
      switch (this[_type$]) {
        case C[2] || CT.C2:
          {
            return 10;
          }
        case C[3] || CT.C3:
          {
            return 8;
          }
        case C[4] || CT.C4:
          {
            return 6;
          }
      }
    }
    milk() {
      switch (this[_type$]) {
        case C[2] || CT.C2:
          {
            return 50;
          }
        case C[3] || CT.C3:
          {
            return 0;
          }
        case C[4] || CT.C4:
          {
            return 0;
          }
      }
    }
    water() {
      switch (this[_type$]) {
        case C[2] || CT.C2:
          {
            return 50;
          }
        case C[3] || CT.C3:
          {
            return 30;
          }
        case C[4] || CT.C4:
          {
            return 100;
          }
      }
    }
    cash() {
      switch (this[_type$]) {
        case C[2] || CT.C2:
          {
            return 120;
          }
        case C[3] || CT.C3:
          {
            return 100;
          }
        case C[4] || CT.C4:
          {
            return 80;
          }
      }
    }
  };
  (Coffee.Coffee.new = function(_type) {
    this[_type$] = _type;
    ;
  }).prototype = Coffee.Coffee.prototype;
  dart.addTypeTests(Coffee.Coffee);
  dart.addTypeCaches(Coffee.Coffee);
  Coffee.Coffee[dart.implements] = () => [ICoffee.ICoffee];
  dart.setMethodSignature(Coffee.Coffee, () => ({
    __proto__: dart.getMethods(Coffee.Coffee.__proto__),
    coffeeBeans: dart.fnType(core.int, []),
    milk: dart.fnType(core.int, []),
    water: dart.fnType(core.int, []),
    cash: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(Coffee.Coffee, I[4]);
  dart.setFieldSignature(Coffee.Coffee, () => ({
    __proto__: dart.getFields(Coffee.Coffee.__proto__),
    [_type$]: dart.finalFieldType(Enums.CoffeeType)
  }));
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/lib/Machine.dart": Machine,
    "file:///zapp/project/lib/Enums.dart": Enums,
    "file:///zapp/project/lib/Resources.dart": Resources,
    "file:///zapp/project/lib/ICoffee.dart": ICoffee,
    "file:///zapp/project/lib/Coffee.dart": Coffee
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/lib/Machine.dart","/zapp/project/lib/Enums.dart","/zapp/project/lib/Resources.dart","/zapp/project/lib/ICoffee.dart","/zapp/project/lib/Coffee.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CI,IA1BF,iCAAgB;AACd,UAAoB,6BAGD;AAF8B,QAA9B,AAAkB,6BAElB,eAF2B;;AAEL,QAAF,CAApB;;AAEnB,UAAO,AAAQ,uBAAY;AAKvB,QAJK,AAAqC,qBAA7B,qCAAuB,uBAAW,QAAC;AAG9C,UAFC,AAAQ,sBAAW,2BAA2B,CAC/C;;;wBAIL,SAAC,GAAG;AACL,UAAO,AAAQ,uBAAY;AAIvB,QAHC,AAAQ,sBAAW,wBAAwB,CAC5C,AAAE,CAAD,eACD,AAAW,UAAD;;2DAGM,yCACb,SAAC,MAAM,QAAQ,MAAM;AAC1B,cAAO,AAAQ,uBAAY;AAC4B,YAAlD,AAAQ,sBAAW,wBAAwB,CAAC,IAAI;;;EAI3D;;AAEiB;AAQd,MAPD,MAAS,gCACC;AACS,UAAf;6CAEe;;IAIrB;;;;ACjDU,wBAAgB;AAGkB,IAA1C,AAAc,aAAD,eAAe,KAAK,KAAK;AAGD,IAArC,AAAO,gBAAM;AACR,oBAAgB,mBAA8B,KAArB,AAAM,yBAAA,aAAkB;AACtD,QAAI,AAAU,SAAD;AACsB,MAAjC,WAAM;AACN;;AAIyB,IAA3B,WAAM;AACuB,IAA7B,WAAM;AACuB,IAA7B,WAAM;AACsB,IAA5B,WAAM;AACqB,IAA3B,AAAO,gBAAM;AACR,iBAAa,mBAA8B,MAArB,AAAM,yBAAA,cAAkB;AACnD,QAAI,AAAO,MAAD;AACmB,MAA3B,WAAM;AACN;;AAIU;AACZ,YAAQ,MAAM;;;AAE0B,UAApC,eAA0B;AAC1B;;;;AAEkC,UAAlC,eAA0B;AAC1B;;;;AAEmC,UAAnC,eAA0B;AAC1B;;;;AAE4B,UAA5B,WAAM;AACN;;;AAIA,iBAAS,AAAc,aAAD,WAAW,YAAY,EAAE,SAAS;AAE5D,QAAI,AAAO,MAAD,KAAI,CAAC;AACoD,MAAjE,WAAM;UACD,KAAI,AAAO,MAAD,KAAI,CAAC;AAC8B,MAAlD,WAAM;;AAGF,mBAAS,MAAM;AACS,MAA5B,WAAM,AAAqB,0BAAP,MAAM;;AAGA,IAA5B,WAAM;AACyD,IAA/D,WAAM,AAAwD,8BAArC,AAAc,AAAU,aAAX;AACU,IAAhD,WAAM,AAAyC,sBAA9B,AAAc,AAAU,aAAX;AACiB,IAA/C,WAAM,AAAwC,oBAA/B,AAAc,AAAU,aAAX;AACgC,IAA5D,WAAM,AAAqD,kCAA9B,AAAc,AAAU,aAAX;EAC5C;;;IC3DY;;;;;;kBAGa,OAAW,MAAU;;AACZ,WAA9B;MAAU,iBAAA,AAAY,iBAAG,KAAK;AACR,YAAtB;MAAU,WAAA,AAAK,WAAG,IAAI;AACE,aAAxB;MAAU,aAAA,AAAM,aAAG,KAAK;IAC1B;yBAGkC;AAChC,YAAQ,AAAU,AAAY,AACU,+BADP,AAAO,MAAD,kBAC/B,AAAU,AAAK,uBAAG,AAAO,MAAD,WACxB,AAAU,AAAM,wBAAG,AAAO,MAAD;IACnC;cAGyB,MAAU;;AACzB,mBAAS,sBAAO,IAAI;AAG5B,WAAK,0BAAqB,MAAM;AAC9B,cAAO,EAAC;;AAIV,UAAI,AAAU,SAAD,GAAG,AAAO,MAAD;AACpB,cAAO,EAAC;;AAIQ,MAAlB,gBAAW,MAAM;AAGc,WAA/B;MAAU,UAAA,AAAK,UAAG,AAAO,MAAD;AAGpB,mBAAS,AAAU,SAAD,GAAG,AAAO,MAAD;AAC/B,YAAO,OAAM;IACf;eAGwB;;AACuB,WAA7C;MAAU,iBAAA,AAAY,iBAAG,AAAO,MAAD;AACA,YAA/B;MAAU,WAAA,AAAK,WAAG,AAAO,MAAD;AACS,aAAjC;MAAU,aAAA,AAAM,aAAG,AAAO,MAAD;AACU,MAAnC,WAAM;IACR;;;;;;IA/CU,kBAAY;;EAgDxB;;;;;;;;;;;;;;;;;;;;;;ICnDA;;;;;;;;;;;;;;;MAJK,uBAAM;;;MACT,2BAAU;;;MACV,yBAAQ;;;MACR,0BAAS;;;;;;;;;ICFL;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;;;;;;;;gBASmB;AACrB,cAAQ,YAAY;;;AAEhB,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;IAEb;gBAEwB,cAAkB;AACxC,cAAQ,YAAY;;;AAEG,YAAnB,mBAAc,KAAK;AACnB;;;;AAEY,YAAZ,YAAO,KAAK;AACZ;;;;AAEa,YAAb,aAAQ,KAAK;AACb;;;;AAEY,YAAZ,YAAO,KAAK;AACZ;;;;AAGA;;;IAEN;;;QAvCO;QACA;QACA;QACA;IAHA;IACA;IACA;IACA;;EACL;;;;;;;;;;;;;;;;;;;ECNJ;;;;;;;;;;ACKI,cAAQ;;;AAEJ,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;IAEb;;AAIE,cAAQ;;;AAEJ,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;IAEb;;AAIE,cAAQ;;;AAEJ,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;IAEb;;AAIE,cAAQ;;;AAEJ,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;IAEb;;;IAhDY;;EAAM","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__lib__Machine: Machine,
    zapp__project__lib__Enums: Enums,
    zapp__project__lib__Resources: Resources,
    zapp__project__lib__ICoffee: ICoffee,
    zapp__project__lib__Coffee: Coffee
  };
}));

//# sourceMappingURL=main.js.map
